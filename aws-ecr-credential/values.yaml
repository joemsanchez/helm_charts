replicaCount: 1

image:
  repository: hub.emrops.com/external/aws-ecr-credential
  tag: 1.0
  pullPolicy: IfNotPresent

namespace: aws-ecr-credential

# move creds here/pass from gitops chart
env:
  account: "983708293885"
  region: us-east-1

envSecrets:
  accessKeyId: "aws-ecr-credentials-secret"
  secretAccessKey: "aws-ecr-credentials-secret"

imagePullSecrets: aws-ecr-credentials-secret

mountSecret:
  - aws-ecr-credentials-secret

service: {}

alias: false
disableDeploy: true
healthProbes: false

ingress:
  enabled: false

resources:
  limits:
    cpu: 300m
    memory: 512Mi
  requests:
    cpu: 300m
    memory: 512Mi

nodeSelector: {}

tolerations: []

affinity: {}

persistence: []

cronJob:
  - name: cronjob
    interpolate: true
    spec:
      schedule: "* */8 * * *"
      successfulJobsHistoryLimit: 2
      failedJobsHistoryLimit: 2
      concurrencyPolicy: Forbid
      jobTemplate:
        spec:
          backoffLimit: 4
          template:
            spec:
              restartPolicy: Never
              activeDeadlineSeconds: 600
              containers:
              - name: job
                image: "{{ .Values.image.repository }}"
                tag: "{{ .Values.image.tag }}"
                args:
                - "/bin/sh"
                - "-c"
                - |
                  AWS_ACCOUNT={{ .Values.env.account }}
                  AWS_REGION={{ .Values.env.region }}
                  echo "AWS_ACCOUNT=$AWS_ACCOUNT"
                  echo "AWS_REGION=$AWS_REGION"

                  aws configure set aws_access_key_id $(.Values.env.accessKeyId)
                  aws configure set aws_secret_access_key $(.Values.env.secretAccessKey)

                  DOCKER_REGISTRY_SERVER=https://${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com
                  DOCKER_USER=AWS
                  DOCKER_PASSWORD=$(aws ecr get-login-password --region ${AWS_REGION})

                  echo "DOCKER_REGISTRY_SERVER=$DOCKER_REGISTRY_SERVER"
                  echo "DOCKER_USER=$DOCKER_USER"
                  echo "DOCKER_PASSWORD=$DOCKER_PASSWORD"a
                  {{ range .Values.namespace }}
                    kubectl delete secret --namespace {{ . }} aws-registry --ignore-not-found=true
                    kubectl create secret --namespace {{ . }} docker-registry aws-registry \
                    --docker-server=$DOCKER_REGISTRY_SERVER \
                    --docker-username=$DOCKER_USER \
                    --docker-password=$DOCKER_PASSWORD \
                    --docker-email=no@email.local
                  {{ end }}
                  kubectl patch serviceaccount default -p '{"imagePullSecrets":[{"name":"aws-registry"}]}'


