{{- $gName := include "Generated.fullname" .}}
{{- $gChart := include "Generated.chart" . }}
{{- $gReleaseName := .Release.Name }}
{{- $gHeritage := .Release.Service }}
{{- $mainScope := . }}
{{- $version := .Values.image.tag }}
{{- range $job :=.Values.cronJob }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ $gName }}-{{ $job.name }}
  labels:
    app: {{ $gName }}
    chart: {{ $gChart }}
    release: {{ $gReleaseName }}
    heritage: {{ $gHeritage }}
    version: {{ $version | default "0" | quote }}
spec:
  {{- if $job.interpolate }}
  schedule: {{ $job.spec.schedule | quote }}
  concurrencyPolicy: {{ default "Forbid" $job.spec.concurrencyPolicy }}
  successfulJobsHistoryLimit: {{ default 1 $job.spec.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ default 1 $job.spec.failedJobsHistoryLimit }}

  jobTemplate:
    spec:
      backoffLimit: {{ default 2 $job.spec.jobTemplate.spec.backoffLimit }}
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: "false"
        spec:
          restartPolicy: {{ default "Never" $job.spec.jobTemplate.spec.template.spec.restartPolicy }}
          activeDeadlineSeconds: {{ default 600 $job.spec.jobTemplate.spec.template.spec.activeDeadlineSeconds }}
          containers:
            {{- range $container := $job.spec.jobTemplate.spec.template.spec.containers }}
            - name: {{ $gName }}-{{ $container.name }}
              image: {{ tpl $container.image $mainScope }}:{{ tpl $container.tag $mainScope }}
              args:
              {{- range $container.args }}
                - {{ . }}
              {{- end }}
              command:
              {{- range $container.command }}
                - {{ . }}
              {{- end }}

              {{- if or $mainScope.Values.env $mainScope.Values.envSecrets $mainScope.Values.envConfigurations }}
              env:
                {{- range $key, $value := $mainScope.Values.env }}
                - name: "{{ $key }}"
                  value: "{{ $value }}"
                {{- end }}
                {{- range $key, $secret := $mainScope.Values.envSecrets }}
                - name: {{ $key }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ $secret }}
                      key: {{ $key | quote }}
                {{- end }}
                {{- range $key, $config := $mainScope.Values.envConfigurations }}
                - name: {{ $key }}
                  valueFrom:
                    configMapKeyRef:
                      name: {{ $config }}
                      key: {{ $key | quote }}
                {{- end }}
              {{- end }}

              volumeMounts:
              {{- if $mainScope.Values.mountSecret }}
              - name: pv-secret
                mountPath: "/var/secret"
                readOnly: true
              {{- end }}
              {{- range $persist := $mainScope.Values.persistence }}
              - name: {{ $persist.name }}
                mountPath: {{ $persist.mountPath }}
              {{- end }}
            {{- end }}

          volumes:
          {{- if $mainScope.Values.mountSecret }}
          - name: pv-secret
            {{- range $value := $mainScope.Values.mountSecret }}
            secret:
              secretName: {{ $value }}
            {{- end }}
          {{- end }}
          {{- range $persist := $mainScope.Values.persistence }}
          - name: {{ $persist.name }}
            persistentVolumeClaim:
              claimName: {{ $gName }}-{{ $persist.name }}
          {{- end }}

  {{- else }}
{{ toYaml $job.spec | indent 2 }}
  {{- end }}
{{- end }}
